generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  teacher
  student
}

enum QuestionType {
  TRUE_FALSE
  MULTIPLE_CHOICE
  SHORT_ANSWER
  LONG_ANSWER
}

enum TestStatus {
  draft
  published
  closed
}

enum SubmissionStatus {
  in_progress
  submitted
  graded
}

enum GradingStatus {
  automatic
  pending
  graded
}

enum LogType {
  screenshot
  webcam_photo
  system_event
}

// Models
model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  password         String
  name             String
  role             UserRole
  uniqueIdentifier String   @unique @db.VarChar(20)
  profileImage     String?  @db.VarChar(255)

  otp            String?   @db.VarChar(6)
  otpExpiry      DateTime?
  otpLastAttempt DateTime?
  otpAttempts    Int       @default(0)
  verified       Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  teacherClasses Class[]        @relation("TeacherClasses")
  studentClasses StudentClass[]
  submissions    Submission[]
  answers        Answer[]
}

model Class {
  id          Int    @id @default(autoincrement())
  code        String @unique @db.VarChar(10)
  name        String @db.VarChar(255)
  description String
  teacherId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  teacher  User           @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: Cascade)
  students StudentClass[]
  tests    Test[]
}

model StudentClass {
  studentId Int
  classId   Int
  joinedAt  DateTime @default(now())

  student User  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([studentId, classId])
}

model Test {
  id          Int        @id @default(autoincrement())
  classId     Int
  title       String     @db.VarChar(255)
  description String?
  duration    Int
  startAt     DateTime
  endAt       DateTime
  status      TestStatus @default(draft)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  questions   Question[]
  submissions Submission[]
}

model Question {
  id            Int          @id @default(autoincrement())
  testId        Int
  text          String       @db.VarChar(1000)
  type          QuestionType
  options       String[]
  correctAnswer Int?
  maxMarks      Int          @default(1)
  image         String?

  test    Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@index([testId])
}

model Submission {
  id          Int              @id @default(autoincrement())
  userId      Int
  testId      Int
  status      SubmissionStatus @default(in_progress)
  startedAt   DateTime
  submittedAt DateTime?
  gradedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  test    Test            @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers Answer[]
  logs    ProctoringLog[]

  @@unique([userId, testId])
  @@index([testId])
}

model Answer {
  id            Int           @id @default(autoincrement())
  studentId     Int
  questionId    Int
  submissionId  Int
  answer        String        @db.Text
  obtainedMarks Float?
  gradingStatus GradingStatus @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([studentId, questionId])
  @@index([submissionId])
}

model ProctoringLog {
  id           Int      @id @default(autoincrement())
  submissionId Int
  logType      LogType
  timestamp    DateTime @default(now())
  meta         Json?

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([logType])
}
